// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: junimohost/accounts/v1/account_manager.proto

#include "junimohost/accounts/v1/account_manager.pb.h"
#include "junimohost/accounts/v1/account_manager.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace junimohost {
namespace accounts {
namespace v1 {

static const char* AccountService_method_names[] = {
  "/junimohost.accounts.v1.AccountService/CreateAccount",
  "/junimohost.accounts.v1.AccountService/DeleteAccount",
};

std::unique_ptr< AccountService::Stub> AccountService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AccountService::Stub> stub(new AccountService::Stub(channel));
  return stub;
}

AccountService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateAccount_(AccountService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAccount_(AccountService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AccountService::Stub::CreateAccount(::grpc::ClientContext* context, const ::junimohost::accounts::v1::CreateAccountRequest& request, ::junimohost::accounts::v1::CreateAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::junimohost::accounts::v1::CreateAccountRequest, ::junimohost::accounts::v1::CreateAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAccount_, context, request, response);
}

void AccountService::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::junimohost::accounts::v1::CreateAccountRequest* request, ::junimohost::accounts::v1::CreateAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::junimohost::accounts::v1::CreateAccountRequest, ::junimohost::accounts::v1::CreateAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, std::move(f));
}

void AccountService::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::junimohost::accounts::v1::CreateAccountRequest* request, ::junimohost::accounts::v1::CreateAccountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::junimohost::accounts::v1::CreateAccountResponse>* AccountService::Stub::PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::junimohost::accounts::v1::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::junimohost::accounts::v1::CreateAccountResponse, ::junimohost::accounts::v1::CreateAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::junimohost::accounts::v1::CreateAccountResponse>* AccountService::Stub::AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::junimohost::accounts::v1::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AccountService::Stub::DeleteAccount(::grpc::ClientContext* context, const ::junimohost::accounts::v1::DeleteAccountRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::junimohost::accounts::v1::DeleteAccountRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAccount_, context, request, response);
}

void AccountService::Stub::experimental_async::DeleteAccount(::grpc::ClientContext* context, const ::junimohost::accounts::v1::DeleteAccountRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::junimohost::accounts::v1::DeleteAccountRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, std::move(f));
}

void AccountService::Stub::experimental_async::DeleteAccount(::grpc::ClientContext* context, const ::junimohost::accounts::v1::DeleteAccountRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AccountService::Stub::PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::junimohost::accounts::v1::DeleteAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::junimohost::accounts::v1::DeleteAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AccountService::Stub::AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::junimohost::accounts::v1::DeleteAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

AccountService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::junimohost::accounts::v1::CreateAccountRequest, ::junimohost::accounts::v1::CreateAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccountService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::junimohost::accounts::v1::CreateAccountRequest* req,
             ::junimohost::accounts::v1::CreateAccountResponse* resp) {
               return service->CreateAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AccountService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AccountService::Service, ::junimohost::accounts::v1::DeleteAccountRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AccountService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::junimohost::accounts::v1::DeleteAccountRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteAccount(ctx, req, resp);
             }, this)));
}

AccountService::Service::~Service() {
}

::grpc::Status AccountService::Service::CreateAccount(::grpc::ServerContext* context, const ::junimohost::accounts::v1::CreateAccountRequest* request, ::junimohost::accounts::v1::CreateAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AccountService::Service::DeleteAccount(::grpc::ServerContext* context, const ::junimohost::accounts::v1::DeleteAccountRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace junimohost
}  // namespace accounts
}  // namespace v1

