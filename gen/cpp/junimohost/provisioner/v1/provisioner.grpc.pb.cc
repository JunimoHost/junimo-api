// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: junimohost/provisioner/v1/provisioner.proto

#include "junimohost/provisioner/v1/provisioner.pb.h"
#include "junimohost/provisioner/v1/provisioner.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace junimohost {
namespace provisioner {
namespace v1 {

static const char* ProvisionerService_method_names[] = {
  "/junimohost.provisioner.v1.ProvisionerService/ProvisionServer",
  "/junimohost.provisioner.v1.ProvisionerService/DeleteServer",
  "/junimohost.provisioner.v1.ProvisionerService/GetServersForAccount",
  "/junimohost.provisioner.v1.ProvisionerService/UpdateServerSize",
};

std::unique_ptr< ProvisionerService::Stub> ProvisionerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProvisionerService::Stub> stub(new ProvisionerService::Stub(channel));
  return stub;
}

ProvisionerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ProvisionServer_(ProvisionerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteServer_(ProvisionerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServersForAccount_(ProvisionerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateServerSize_(ProvisionerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProvisionerService::Stub::ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::junimohost::provisioner::v1::ProvisionServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::junimohost::provisioner::v1::ProvisionServerRequest, ::junimohost::provisioner::v1::ProvisionServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvisionServer_, context, request, response);
}

void ProvisionerService::Stub::experimental_async::ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::junimohost::provisioner::v1::ProvisionServerRequest, ::junimohost::provisioner::v1::ProvisionServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvisionServer_, context, request, response, std::move(f));
}

void ProvisionerService::Stub::experimental_async::ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvisionServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::ProvisionServerResponse>* ProvisionerService::Stub::PrepareAsyncProvisionServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::junimohost::provisioner::v1::ProvisionServerResponse, ::junimohost::provisioner::v1::ProvisionServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvisionServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::ProvisionServerResponse>* ProvisionerService::Stub::AsyncProvisionServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvisionServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisionerService::Stub::DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::junimohost::provisioner::v1::DeleteServerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteServer_, context, request, response);
}

void ProvisionerService::Stub::experimental_async::DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::junimohost::provisioner::v1::DeleteServerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteServer_, context, request, response, std::move(f));
}

void ProvisionerService::Stub::experimental_async::DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ProvisionerService::Stub::PrepareAsyncDeleteServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::junimohost::provisioner::v1::DeleteServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ProvisionerService::Stub::AsyncDeleteServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisionerService::Stub::GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::junimohost::provisioner::v1::GetServersForAccountRequest, ::junimohost::provisioner::v1::GetServersForAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServersForAccount_, context, request, response);
}

void ProvisionerService::Stub::experimental_async::GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::junimohost::provisioner::v1::GetServersForAccountRequest, ::junimohost::provisioner::v1::GetServersForAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServersForAccount_, context, request, response, std::move(f));
}

void ProvisionerService::Stub::experimental_async::GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServersForAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::GetServersForAccountResponse>* ProvisionerService::Stub::PrepareAsyncGetServersForAccountRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::junimohost::provisioner::v1::GetServersForAccountResponse, ::junimohost::provisioner::v1::GetServersForAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServersForAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::GetServersForAccountResponse>* ProvisionerService::Stub::AsyncGetServersForAccountRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServersForAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisionerService::Stub::UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::junimohost::provisioner::v1::UpdateServerSizeRequest, ::junimohost::provisioner::v1::UpdateServerSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateServerSize_, context, request, response);
}

void ProvisionerService::Stub::experimental_async::UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::junimohost::provisioner::v1::UpdateServerSizeRequest, ::junimohost::provisioner::v1::UpdateServerSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateServerSize_, context, request, response, std::move(f));
}

void ProvisionerService::Stub::experimental_async::UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateServerSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::UpdateServerSizeResponse>* ProvisionerService::Stub::PrepareAsyncUpdateServerSizeRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::junimohost::provisioner::v1::UpdateServerSizeResponse, ::junimohost::provisioner::v1::UpdateServerSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateServerSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::UpdateServerSizeResponse>* ProvisionerService::Stub::AsyncUpdateServerSizeRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateServerSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProvisionerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisionerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisionerService::Service, ::junimohost::provisioner::v1::ProvisionServerRequest, ::junimohost::provisioner::v1::ProvisionServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisionerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::junimohost::provisioner::v1::ProvisionServerRequest* req,
             ::junimohost::provisioner::v1::ProvisionServerResponse* resp) {
               return service->ProvisionServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisionerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisionerService::Service, ::junimohost::provisioner::v1::DeleteServerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisionerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::junimohost::provisioner::v1::DeleteServerRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisionerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisionerService::Service, ::junimohost::provisioner::v1::GetServersForAccountRequest, ::junimohost::provisioner::v1::GetServersForAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisionerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::junimohost::provisioner::v1::GetServersForAccountRequest* req,
             ::junimohost::provisioner::v1::GetServersForAccountResponse* resp) {
               return service->GetServersForAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisionerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisionerService::Service, ::junimohost::provisioner::v1::UpdateServerSizeRequest, ::junimohost::provisioner::v1::UpdateServerSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisionerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::junimohost::provisioner::v1::UpdateServerSizeRequest* req,
             ::junimohost::provisioner::v1::UpdateServerSizeResponse* resp) {
               return service->UpdateServerSize(ctx, req, resp);
             }, this)));
}

ProvisionerService::Service::~Service() {
}

::grpc::Status ProvisionerService::Service::ProvisionServer(::grpc::ServerContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisionerService::Service::DeleteServer(::grpc::ServerContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisionerService::Service::GetServersForAccount(::grpc::ServerContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisionerService::Service::UpdateServerSize(::grpc::ServerContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace junimohost
}  // namespace provisioner
}  // namespace v1

