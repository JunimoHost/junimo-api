// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: junimohost/provisioner/v1/provisioner.proto
#ifndef GRPC_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto__INCLUDED
#define GRPC_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto__INCLUDED

#include "junimohost/provisioner/v1/provisioner.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace junimohost {
namespace provisioner {
namespace v1 {

class ProvisionerService final {
 public:
  static constexpr char const* service_full_name() {
    return "junimohost.provisioner.v1.ProvisionerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // maybe need to return long running operation? idk how long this will take
    virtual ::grpc::Status ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::junimohost::provisioner::v1::ProvisionServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::ProvisionServerResponse>> AsyncProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::ProvisionServerResponse>>(AsyncProvisionServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::ProvisionServerResponse>> PrepareAsyncProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::ProvisionServerResponse>>(PrepareAsyncProvisionServerRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::GetServersForAccountResponse>> AsyncGetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::GetServersForAccountResponse>>(AsyncGetServersForAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::GetServersForAccountResponse>> PrepareAsyncGetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::GetServersForAccountResponse>>(PrepareAsyncGetServersForAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::UpdateServerSizeResponse>> AsyncUpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::UpdateServerSizeResponse>>(AsyncUpdateServerSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::UpdateServerSizeResponse>> PrepareAsyncUpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::UpdateServerSizeResponse>>(PrepareAsyncUpdateServerSizeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // maybe need to return long running operation? idk how long this will take
      virtual void ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::ProvisionServerResponse>* AsyncProvisionServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::ProvisionServerResponse>* PrepareAsyncProvisionServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::GetServersForAccountResponse>* AsyncGetServersForAccountRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::GetServersForAccountResponse>* PrepareAsyncGetServersForAccountRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::UpdateServerSizeResponse>* AsyncUpdateServerSizeRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::junimohost::provisioner::v1::UpdateServerSizeResponse>* PrepareAsyncUpdateServerSizeRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::junimohost::provisioner::v1::ProvisionServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::ProvisionServerResponse>> AsyncProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::ProvisionServerResponse>>(AsyncProvisionServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::ProvisionServerResponse>> PrepareAsyncProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::ProvisionServerResponse>>(PrepareAsyncProvisionServerRaw(context, request, cq));
    }
    ::grpc::Status DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteServerRaw(context, request, cq));
    }
    ::grpc::Status GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::GetServersForAccountResponse>> AsyncGetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::GetServersForAccountResponse>>(AsyncGetServersForAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::GetServersForAccountResponse>> PrepareAsyncGetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::GetServersForAccountResponse>>(PrepareAsyncGetServersForAccountRaw(context, request, cq));
    }
    ::grpc::Status UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::UpdateServerSizeResponse>> AsyncUpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::UpdateServerSizeResponse>>(AsyncUpdateServerSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::UpdateServerSizeResponse>> PrepareAsyncUpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::UpdateServerSizeResponse>>(PrepareAsyncUpdateServerSizeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ProvisionServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteServer(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServersForAccount(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateServerSize(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::ProvisionServerResponse>* AsyncProvisionServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::ProvisionServerResponse>* PrepareAsyncProvisionServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteServerRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::GetServersForAccountResponse>* AsyncGetServersForAccountRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::GetServersForAccountResponse>* PrepareAsyncGetServersForAccountRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::UpdateServerSizeResponse>* AsyncUpdateServerSizeRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::junimohost::provisioner::v1::UpdateServerSizeResponse>* PrepareAsyncUpdateServerSizeRaw(::grpc::ClientContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ProvisionServer_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServersForAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateServerSize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // maybe need to return long running operation? idk how long this will take
    virtual ::grpc::Status ProvisionServer(::grpc::ServerContext* context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response);
    virtual ::grpc::Status DeleteServer(::grpc::ServerContext* context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetServersForAccount(::grpc::ServerContext* context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response);
    virtual ::grpc::Status UpdateServerSize(::grpc::ServerContext* context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ProvisionServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProvisionServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ProvisionServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProvisionServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::ProvisionServerRequest* /*request*/, ::junimohost::provisioner::v1::ProvisionServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProvisionServer(::grpc::ServerContext* context, ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::junimohost::provisioner::v1::ProvisionServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteServer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::DeleteServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteServer(::grpc::ServerContext* context, ::junimohost::provisioner::v1::DeleteServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServersForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServersForAccount() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetServersForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServersForAccount(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::GetServersForAccountRequest* /*request*/, ::junimohost::provisioner::v1::GetServersForAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServersForAccount(::grpc::ServerContext* context, ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::junimohost::provisioner::v1::GetServersForAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateServerSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateServerSize() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateServerSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServerSize(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* /*request*/, ::junimohost::provisioner::v1::UpdateServerSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateServerSize(::grpc::ServerContext* context, ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::junimohost::provisioner::v1::UpdateServerSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ProvisionServer<WithAsyncMethod_DeleteServer<WithAsyncMethod_GetServersForAccount<WithAsyncMethod_UpdateServerSize<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ProvisionServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ProvisionServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::junimohost::provisioner::v1::ProvisionServerRequest, ::junimohost::provisioner::v1::ProvisionServerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::junimohost::provisioner::v1::ProvisionServerRequest* request, ::junimohost::provisioner::v1::ProvisionServerResponse* response) { return this->ProvisionServer(context, request, response); }));}
    void SetMessageAllocatorFor_ProvisionServer(
        ::grpc::experimental::MessageAllocator< ::junimohost::provisioner::v1::ProvisionServerRequest, ::junimohost::provisioner::v1::ProvisionServerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::junimohost::provisioner::v1::ProvisionServerRequest, ::junimohost::provisioner::v1::ProvisionServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ProvisionServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProvisionServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::ProvisionServerRequest* /*request*/, ::junimohost::provisioner::v1::ProvisionServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProvisionServer(
      ::grpc::CallbackServerContext* /*context*/, const ::junimohost::provisioner::v1::ProvisionServerRequest* /*request*/, ::junimohost::provisioner::v1::ProvisionServerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProvisionServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::junimohost::provisioner::v1::ProvisionServerRequest* /*request*/, ::junimohost::provisioner::v1::ProvisionServerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::junimohost::provisioner::v1::DeleteServerRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::junimohost::provisioner::v1::DeleteServerRequest* request, ::google::protobuf::Empty* response) { return this->DeleteServer(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteServer(
        ::grpc::experimental::MessageAllocator< ::junimohost::provisioner::v1::DeleteServerRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::junimohost::provisioner::v1::DeleteServerRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::DeleteServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteServer(
      ::grpc::CallbackServerContext* /*context*/, const ::junimohost::provisioner::v1::DeleteServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::junimohost::provisioner::v1::DeleteServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServersForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServersForAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::junimohost::provisioner::v1::GetServersForAccountRequest, ::junimohost::provisioner::v1::GetServersForAccountResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::junimohost::provisioner::v1::GetServersForAccountRequest* request, ::junimohost::provisioner::v1::GetServersForAccountResponse* response) { return this->GetServersForAccount(context, request, response); }));}
    void SetMessageAllocatorFor_GetServersForAccount(
        ::grpc::experimental::MessageAllocator< ::junimohost::provisioner::v1::GetServersForAccountRequest, ::junimohost::provisioner::v1::GetServersForAccountResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::junimohost::provisioner::v1::GetServersForAccountRequest, ::junimohost::provisioner::v1::GetServersForAccountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServersForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServersForAccount(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::GetServersForAccountRequest* /*request*/, ::junimohost::provisioner::v1::GetServersForAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServersForAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::junimohost::provisioner::v1::GetServersForAccountRequest* /*request*/, ::junimohost::provisioner::v1::GetServersForAccountResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServersForAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::junimohost::provisioner::v1::GetServersForAccountRequest* /*request*/, ::junimohost::provisioner::v1::GetServersForAccountResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateServerSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateServerSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::junimohost::provisioner::v1::UpdateServerSizeRequest, ::junimohost::provisioner::v1::UpdateServerSizeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* request, ::junimohost::provisioner::v1::UpdateServerSizeResponse* response) { return this->UpdateServerSize(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateServerSize(
        ::grpc::experimental::MessageAllocator< ::junimohost::provisioner::v1::UpdateServerSizeRequest, ::junimohost::provisioner::v1::UpdateServerSizeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::junimohost::provisioner::v1::UpdateServerSizeRequest, ::junimohost::provisioner::v1::UpdateServerSizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateServerSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServerSize(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* /*request*/, ::junimohost::provisioner::v1::UpdateServerSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateServerSize(
      ::grpc::CallbackServerContext* /*context*/, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* /*request*/, ::junimohost::provisioner::v1::UpdateServerSizeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateServerSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* /*request*/, ::junimohost::provisioner::v1::UpdateServerSizeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ProvisionServer<ExperimentalWithCallbackMethod_DeleteServer<ExperimentalWithCallbackMethod_GetServersForAccount<ExperimentalWithCallbackMethod_UpdateServerSize<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ProvisionServer<ExperimentalWithCallbackMethod_DeleteServer<ExperimentalWithCallbackMethod_GetServersForAccount<ExperimentalWithCallbackMethod_UpdateServerSize<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ProvisionServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProvisionServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ProvisionServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProvisionServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::ProvisionServerRequest* /*request*/, ::junimohost::provisioner::v1::ProvisionServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteServer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::DeleteServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServersForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServersForAccount() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetServersForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServersForAccount(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::GetServersForAccountRequest* /*request*/, ::junimohost::provisioner::v1::GetServersForAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateServerSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateServerSize() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateServerSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServerSize(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* /*request*/, ::junimohost::provisioner::v1::UpdateServerSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProvisionServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProvisionServer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ProvisionServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProvisionServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::ProvisionServerRequest* /*request*/, ::junimohost::provisioner::v1::ProvisionServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProvisionServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteServer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::DeleteServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServersForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServersForAccount() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetServersForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServersForAccount(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::GetServersForAccountRequest* /*request*/, ::junimohost::provisioner::v1::GetServersForAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServersForAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateServerSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateServerSize() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateServerSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServerSize(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* /*request*/, ::junimohost::provisioner::v1::UpdateServerSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateServerSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ProvisionServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ProvisionServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProvisionServer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ProvisionServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProvisionServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::ProvisionServerRequest* /*request*/, ::junimohost::provisioner::v1::ProvisionServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProvisionServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProvisionServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteServer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteServer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::DeleteServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteServer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServersForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServersForAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServersForAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServersForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServersForAccount(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::GetServersForAccountRequest* /*request*/, ::junimohost::provisioner::v1::GetServersForAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServersForAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServersForAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateServerSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateServerSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateServerSize(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateServerSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServerSize(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* /*request*/, ::junimohost::provisioner::v1::UpdateServerSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateServerSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateServerSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProvisionServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProvisionServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::junimohost::provisioner::v1::ProvisionServerRequest, ::junimohost::provisioner::v1::ProvisionServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::junimohost::provisioner::v1::ProvisionServerRequest, ::junimohost::provisioner::v1::ProvisionServerResponse>* streamer) {
                       return this->StreamedProvisionServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProvisionServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProvisionServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::ProvisionServerRequest* /*request*/, ::junimohost::provisioner::v1::ProvisionServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProvisionServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::junimohost::provisioner::v1::ProvisionServerRequest,::junimohost::provisioner::v1::ProvisionServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteServer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::junimohost::provisioner::v1::DeleteServerRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::junimohost::provisioner::v1::DeleteServerRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteServer(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::DeleteServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::junimohost::provisioner::v1::DeleteServerRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServersForAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServersForAccount() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::junimohost::provisioner::v1::GetServersForAccountRequest, ::junimohost::provisioner::v1::GetServersForAccountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::junimohost::provisioner::v1::GetServersForAccountRequest, ::junimohost::provisioner::v1::GetServersForAccountResponse>* streamer) {
                       return this->StreamedGetServersForAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServersForAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServersForAccount(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::GetServersForAccountRequest* /*request*/, ::junimohost::provisioner::v1::GetServersForAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServersForAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::junimohost::provisioner::v1::GetServersForAccountRequest,::junimohost::provisioner::v1::GetServersForAccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateServerSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateServerSize() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::junimohost::provisioner::v1::UpdateServerSizeRequest, ::junimohost::provisioner::v1::UpdateServerSizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::junimohost::provisioner::v1::UpdateServerSizeRequest, ::junimohost::provisioner::v1::UpdateServerSizeResponse>* streamer) {
                       return this->StreamedUpdateServerSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateServerSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateServerSize(::grpc::ServerContext* /*context*/, const ::junimohost::provisioner::v1::UpdateServerSizeRequest* /*request*/, ::junimohost::provisioner::v1::UpdateServerSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateServerSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::junimohost::provisioner::v1::UpdateServerSizeRequest,::junimohost::provisioner::v1::UpdateServerSizeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ProvisionServer<WithStreamedUnaryMethod_DeleteServer<WithStreamedUnaryMethod_GetServersForAccount<WithStreamedUnaryMethod_UpdateServerSize<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ProvisionServer<WithStreamedUnaryMethod_DeleteServer<WithStreamedUnaryMethod_GetServersForAccount<WithStreamedUnaryMethod_UpdateServerSize<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace provisioner
}  // namespace junimohost


#endif  // GRPC_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto__INCLUDED
