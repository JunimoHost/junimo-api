// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: junimohost/provisioner/v1/provisioner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto;
namespace junimohost {
namespace provisioner {
namespace v1 {
class DeleteServerRequest;
class DeleteServerRequestDefaultTypeInternal;
extern DeleteServerRequestDefaultTypeInternal _DeleteServerRequest_default_instance_;
class GetServersForAccountRequest;
class GetServersForAccountRequestDefaultTypeInternal;
extern GetServersForAccountRequestDefaultTypeInternal _GetServersForAccountRequest_default_instance_;
class GetServersForAccountResponse;
class GetServersForAccountResponseDefaultTypeInternal;
extern GetServersForAccountResponseDefaultTypeInternal _GetServersForAccountResponse_default_instance_;
class ProvisionServerRequest;
class ProvisionServerRequestDefaultTypeInternal;
extern ProvisionServerRequestDefaultTypeInternal _ProvisionServerRequest_default_instance_;
class ProvisionServerResponse;
class ProvisionServerResponseDefaultTypeInternal;
extern ProvisionServerResponseDefaultTypeInternal _ProvisionServerResponse_default_instance_;
class ProvisionedServer;
class ProvisionedServerDefaultTypeInternal;
extern ProvisionedServerDefaultTypeInternal _ProvisionedServer_default_instance_;
class UpdateServerSizeRequest;
class UpdateServerSizeRequestDefaultTypeInternal;
extern UpdateServerSizeRequestDefaultTypeInternal _UpdateServerSizeRequest_default_instance_;
class UpdateServerSizeResponse;
class UpdateServerSizeResponseDefaultTypeInternal;
extern UpdateServerSizeResponseDefaultTypeInternal _UpdateServerSizeResponse_default_instance_;
}  // namespace v1
}  // namespace provisioner
}  // namespace junimohost
PROTOBUF_NAMESPACE_OPEN
template<> ::junimohost::provisioner::v1::DeleteServerRequest* Arena::CreateMaybeMessage<::junimohost::provisioner::v1::DeleteServerRequest>(Arena*);
template<> ::junimohost::provisioner::v1::GetServersForAccountRequest* Arena::CreateMaybeMessage<::junimohost::provisioner::v1::GetServersForAccountRequest>(Arena*);
template<> ::junimohost::provisioner::v1::GetServersForAccountResponse* Arena::CreateMaybeMessage<::junimohost::provisioner::v1::GetServersForAccountResponse>(Arena*);
template<> ::junimohost::provisioner::v1::ProvisionServerRequest* Arena::CreateMaybeMessage<::junimohost::provisioner::v1::ProvisionServerRequest>(Arena*);
template<> ::junimohost::provisioner::v1::ProvisionServerResponse* Arena::CreateMaybeMessage<::junimohost::provisioner::v1::ProvisionServerResponse>(Arena*);
template<> ::junimohost::provisioner::v1::ProvisionedServer* Arena::CreateMaybeMessage<::junimohost::provisioner::v1::ProvisionedServer>(Arena*);
template<> ::junimohost::provisioner::v1::UpdateServerSizeRequest* Arena::CreateMaybeMessage<::junimohost::provisioner::v1::UpdateServerSizeRequest>(Arena*);
template<> ::junimohost::provisioner::v1::UpdateServerSizeResponse* Arena::CreateMaybeMessage<::junimohost::provisioner::v1::UpdateServerSizeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace junimohost {
namespace provisioner {
namespace v1 {

// ===================================================================

class ProvisionedServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:junimohost.provisioner.v1.ProvisionedServer) */ {
 public:
  inline ProvisionedServer() : ProvisionedServer(nullptr) {}
  virtual ~ProvisionedServer();

  ProvisionedServer(const ProvisionedServer& from);
  ProvisionedServer(ProvisionedServer&& from) noexcept
    : ProvisionedServer() {
    *this = ::std::move(from);
  }

  inline ProvisionedServer& operator=(const ProvisionedServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvisionedServer& operator=(ProvisionedServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProvisionedServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProvisionedServer* internal_default_instance() {
    return reinterpret_cast<const ProvisionedServer*>(
               &_ProvisionedServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProvisionedServer& a, ProvisionedServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvisionedServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvisionedServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvisionedServer* New() const final {
    return CreateMaybeMessage<ProvisionedServer>(nullptr);
  }

  ProvisionedServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvisionedServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProvisionedServer& from);
  void MergeFrom(const ProvisionedServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvisionedServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "junimohost.provisioner.v1.ProvisionedServer";
  }
  protected:
  explicit ProvisionedServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto);
    return ::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostUriFieldNumber = 4,
    kAdminAccountIdFieldNumber = 1,
    kServerIdFieldNumber = 2,
    kInstanceSizeFieldNumber = 3,
  };
  // string host_uri = 4[json_name = "hostUri"];
  void clear_host_uri();
  const std::string& host_uri() const;
  void set_host_uri(const std::string& value);
  void set_host_uri(std::string&& value);
  void set_host_uri(const char* value);
  void set_host_uri(const char* value, size_t size);
  std::string* mutable_host_uri();
  std::string* release_host_uri();
  void set_allocated_host_uri(std::string* host_uri);
  private:
  const std::string& _internal_host_uri() const;
  void _internal_set_host_uri(const std::string& value);
  std::string* _internal_mutable_host_uri();
  public:

  // int64 admin_account_id = 1[json_name = "adminAccountId"];
  void clear_admin_account_id();
  ::PROTOBUF_NAMESPACE_ID::int64 admin_account_id() const;
  void set_admin_account_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_admin_account_id() const;
  void _internal_set_admin_account_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 server_id = 2[json_name = "serverId"];
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 instance_size = 3[json_name = "instanceSize"];
  void clear_instance_size();
  ::PROTOBUF_NAMESPACE_ID::int32 instance_size() const;
  void set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instance_size() const;
  void _internal_set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:junimohost.provisioner.v1.ProvisionedServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_uri_;
  ::PROTOBUF_NAMESPACE_ID::int64 admin_account_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 instance_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto;
};
// -------------------------------------------------------------------

class UpdateServerSizeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:junimohost.provisioner.v1.UpdateServerSizeRequest) */ {
 public:
  inline UpdateServerSizeRequest() : UpdateServerSizeRequest(nullptr) {}
  virtual ~UpdateServerSizeRequest();

  UpdateServerSizeRequest(const UpdateServerSizeRequest& from);
  UpdateServerSizeRequest(UpdateServerSizeRequest&& from) noexcept
    : UpdateServerSizeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateServerSizeRequest& operator=(const UpdateServerSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServerSizeRequest& operator=(UpdateServerSizeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateServerSizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateServerSizeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateServerSizeRequest*>(
               &_UpdateServerSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateServerSizeRequest& a, UpdateServerSizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServerSizeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServerSizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateServerSizeRequest* New() const final {
    return CreateMaybeMessage<UpdateServerSizeRequest>(nullptr);
  }

  UpdateServerSizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateServerSizeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateServerSizeRequest& from);
  void MergeFrom(const UpdateServerSizeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServerSizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "junimohost.provisioner.v1.UpdateServerSizeRequest";
  }
  protected:
  explicit UpdateServerSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto);
    return ::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kInstanceSizeFieldNumber = 2,
  };
  // int64 server_id = 1[json_name = "serverId"];
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 instance_size = 2[json_name = "instanceSize"];
  void clear_instance_size();
  ::PROTOBUF_NAMESPACE_ID::int32 instance_size() const;
  void set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instance_size() const;
  void _internal_set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:junimohost.provisioner.v1.UpdateServerSizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 instance_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto;
};
// -------------------------------------------------------------------

class UpdateServerSizeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:junimohost.provisioner.v1.UpdateServerSizeResponse) */ {
 public:
  inline UpdateServerSizeResponse() : UpdateServerSizeResponse(nullptr) {}
  virtual ~UpdateServerSizeResponse();

  UpdateServerSizeResponse(const UpdateServerSizeResponse& from);
  UpdateServerSizeResponse(UpdateServerSizeResponse&& from) noexcept
    : UpdateServerSizeResponse() {
    *this = ::std::move(from);
  }

  inline UpdateServerSizeResponse& operator=(const UpdateServerSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServerSizeResponse& operator=(UpdateServerSizeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateServerSizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateServerSizeResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateServerSizeResponse*>(
               &_UpdateServerSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateServerSizeResponse& a, UpdateServerSizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServerSizeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServerSizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateServerSizeResponse* New() const final {
    return CreateMaybeMessage<UpdateServerSizeResponse>(nullptr);
  }

  UpdateServerSizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateServerSizeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateServerSizeResponse& from);
  void MergeFrom(const UpdateServerSizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServerSizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "junimohost.provisioner.v1.UpdateServerSizeResponse";
  }
  protected:
  explicit UpdateServerSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto);
    return ::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
  };
  // .junimohost.provisioner.v1.ProvisionedServer server = 1[json_name = "server"];
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::junimohost::provisioner::v1::ProvisionedServer& server() const;
  ::junimohost::provisioner::v1::ProvisionedServer* release_server();
  ::junimohost::provisioner::v1::ProvisionedServer* mutable_server();
  void set_allocated_server(::junimohost::provisioner::v1::ProvisionedServer* server);
  private:
  const ::junimohost::provisioner::v1::ProvisionedServer& _internal_server() const;
  ::junimohost::provisioner::v1::ProvisionedServer* _internal_mutable_server();
  public:
  void unsafe_arena_set_allocated_server(
      ::junimohost::provisioner::v1::ProvisionedServer* server);
  ::junimohost::provisioner::v1::ProvisionedServer* unsafe_arena_release_server();

  // @@protoc_insertion_point(class_scope:junimohost.provisioner.v1.UpdateServerSizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::junimohost::provisioner::v1::ProvisionedServer* server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto;
};
// -------------------------------------------------------------------

class ProvisionServerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:junimohost.provisioner.v1.ProvisionServerRequest) */ {
 public:
  inline ProvisionServerRequest() : ProvisionServerRequest(nullptr) {}
  virtual ~ProvisionServerRequest();

  ProvisionServerRequest(const ProvisionServerRequest& from);
  ProvisionServerRequest(ProvisionServerRequest&& from) noexcept
    : ProvisionServerRequest() {
    *this = ::std::move(from);
  }

  inline ProvisionServerRequest& operator=(const ProvisionServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvisionServerRequest& operator=(ProvisionServerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProvisionServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProvisionServerRequest* internal_default_instance() {
    return reinterpret_cast<const ProvisionServerRequest*>(
               &_ProvisionServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProvisionServerRequest& a, ProvisionServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvisionServerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvisionServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvisionServerRequest* New() const final {
    return CreateMaybeMessage<ProvisionServerRequest>(nullptr);
  }

  ProvisionServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvisionServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProvisionServerRequest& from);
  void MergeFrom(const ProvisionServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvisionServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "junimohost.provisioner.v1.ProvisionServerRequest";
  }
  protected:
  explicit ProvisionServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto);
    return ::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminAccountIdFieldNumber = 1,
    kInstanceSizeFieldNumber = 2,
  };
  // int64 admin_account_id = 1[json_name = "adminAccountId"];
  void clear_admin_account_id();
  ::PROTOBUF_NAMESPACE_ID::int64 admin_account_id() const;
  void set_admin_account_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_admin_account_id() const;
  void _internal_set_admin_account_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 instance_size = 2[json_name = "instanceSize"];
  void clear_instance_size();
  ::PROTOBUF_NAMESPACE_ID::int32 instance_size() const;
  void set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instance_size() const;
  void _internal_set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:junimohost.provisioner.v1.ProvisionServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 admin_account_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 instance_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto;
};
// -------------------------------------------------------------------

class ProvisionServerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:junimohost.provisioner.v1.ProvisionServerResponse) */ {
 public:
  inline ProvisionServerResponse() : ProvisionServerResponse(nullptr) {}
  virtual ~ProvisionServerResponse();

  ProvisionServerResponse(const ProvisionServerResponse& from);
  ProvisionServerResponse(ProvisionServerResponse&& from) noexcept
    : ProvisionServerResponse() {
    *this = ::std::move(from);
  }

  inline ProvisionServerResponse& operator=(const ProvisionServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvisionServerResponse& operator=(ProvisionServerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProvisionServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProvisionServerResponse* internal_default_instance() {
    return reinterpret_cast<const ProvisionServerResponse*>(
               &_ProvisionServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProvisionServerResponse& a, ProvisionServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvisionServerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvisionServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvisionServerResponse* New() const final {
    return CreateMaybeMessage<ProvisionServerResponse>(nullptr);
  }

  ProvisionServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvisionServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProvisionServerResponse& from);
  void MergeFrom(const ProvisionServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvisionServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "junimohost.provisioner.v1.ProvisionServerResponse";
  }
  protected:
  explicit ProvisionServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto);
    return ::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
  };
  // .junimohost.provisioner.v1.ProvisionedServer server = 1[json_name = "server"];
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::junimohost::provisioner::v1::ProvisionedServer& server() const;
  ::junimohost::provisioner::v1::ProvisionedServer* release_server();
  ::junimohost::provisioner::v1::ProvisionedServer* mutable_server();
  void set_allocated_server(::junimohost::provisioner::v1::ProvisionedServer* server);
  private:
  const ::junimohost::provisioner::v1::ProvisionedServer& _internal_server() const;
  ::junimohost::provisioner::v1::ProvisionedServer* _internal_mutable_server();
  public:
  void unsafe_arena_set_allocated_server(
      ::junimohost::provisioner::v1::ProvisionedServer* server);
  ::junimohost::provisioner::v1::ProvisionedServer* unsafe_arena_release_server();

  // @@protoc_insertion_point(class_scope:junimohost.provisioner.v1.ProvisionServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::junimohost::provisioner::v1::ProvisionedServer* server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto;
};
// -------------------------------------------------------------------

class DeleteServerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:junimohost.provisioner.v1.DeleteServerRequest) */ {
 public:
  inline DeleteServerRequest() : DeleteServerRequest(nullptr) {}
  virtual ~DeleteServerRequest();

  DeleteServerRequest(const DeleteServerRequest& from);
  DeleteServerRequest(DeleteServerRequest&& from) noexcept
    : DeleteServerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteServerRequest& operator=(const DeleteServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteServerRequest& operator=(DeleteServerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteServerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteServerRequest*>(
               &_DeleteServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteServerRequest& a, DeleteServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteServerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteServerRequest* New() const final {
    return CreateMaybeMessage<DeleteServerRequest>(nullptr);
  }

  DeleteServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteServerRequest& from);
  void MergeFrom(const DeleteServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "junimohost.provisioner.v1.DeleteServerRequest";
  }
  protected:
  explicit DeleteServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto);
    return ::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // int64 server_id = 1[json_name = "serverId"];
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:junimohost.provisioner.v1.DeleteServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto;
};
// -------------------------------------------------------------------

class GetServersForAccountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:junimohost.provisioner.v1.GetServersForAccountRequest) */ {
 public:
  inline GetServersForAccountRequest() : GetServersForAccountRequest(nullptr) {}
  virtual ~GetServersForAccountRequest();

  GetServersForAccountRequest(const GetServersForAccountRequest& from);
  GetServersForAccountRequest(GetServersForAccountRequest&& from) noexcept
    : GetServersForAccountRequest() {
    *this = ::std::move(from);
  }

  inline GetServersForAccountRequest& operator=(const GetServersForAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServersForAccountRequest& operator=(GetServersForAccountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServersForAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServersForAccountRequest* internal_default_instance() {
    return reinterpret_cast<const GetServersForAccountRequest*>(
               &_GetServersForAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetServersForAccountRequest& a, GetServersForAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServersForAccountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServersForAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServersForAccountRequest* New() const final {
    return CreateMaybeMessage<GetServersForAccountRequest>(nullptr);
  }

  GetServersForAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServersForAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServersForAccountRequest& from);
  void MergeFrom(const GetServersForAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServersForAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "junimohost.provisioner.v1.GetServersForAccountRequest";
  }
  protected:
  explicit GetServersForAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto);
    return ::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // int64 account_id = 1[json_name = "accountId"];
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::int64 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:junimohost.provisioner.v1.GetServersForAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 account_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto;
};
// -------------------------------------------------------------------

class GetServersForAccountResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:junimohost.provisioner.v1.GetServersForAccountResponse) */ {
 public:
  inline GetServersForAccountResponse() : GetServersForAccountResponse(nullptr) {}
  virtual ~GetServersForAccountResponse();

  GetServersForAccountResponse(const GetServersForAccountResponse& from);
  GetServersForAccountResponse(GetServersForAccountResponse&& from) noexcept
    : GetServersForAccountResponse() {
    *this = ::std::move(from);
  }

  inline GetServersForAccountResponse& operator=(const GetServersForAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServersForAccountResponse& operator=(GetServersForAccountResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServersForAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServersForAccountResponse* internal_default_instance() {
    return reinterpret_cast<const GetServersForAccountResponse*>(
               &_GetServersForAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetServersForAccountResponse& a, GetServersForAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServersForAccountResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServersForAccountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServersForAccountResponse* New() const final {
    return CreateMaybeMessage<GetServersForAccountResponse>(nullptr);
  }

  GetServersForAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServersForAccountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServersForAccountResponse& from);
  void MergeFrom(const GetServersForAccountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServersForAccountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "junimohost.provisioner.v1.GetServersForAccountResponse";
  }
  protected:
  explicit GetServersForAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto);
    return ::descriptor_table_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
  };
  // repeated .junimohost.provisioner.v1.ProvisionedServer servers = 1[json_name = "servers"];
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::junimohost::provisioner::v1::ProvisionedServer* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::junimohost::provisioner::v1::ProvisionedServer >*
      mutable_servers();
  private:
  const ::junimohost::provisioner::v1::ProvisionedServer& _internal_servers(int index) const;
  ::junimohost::provisioner::v1::ProvisionedServer* _internal_add_servers();
  public:
  const ::junimohost::provisioner::v1::ProvisionedServer& servers(int index) const;
  ::junimohost::provisioner::v1::ProvisionedServer* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::junimohost::provisioner::v1::ProvisionedServer >&
      servers() const;

  // @@protoc_insertion_point(class_scope:junimohost.provisioner.v1.GetServersForAccountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::junimohost::provisioner::v1::ProvisionedServer > servers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProvisionedServer

// int64 admin_account_id = 1[json_name = "adminAccountId"];
inline void ProvisionedServer::clear_admin_account_id() {
  admin_account_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProvisionedServer::_internal_admin_account_id() const {
  return admin_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProvisionedServer::admin_account_id() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.ProvisionedServer.admin_account_id)
  return _internal_admin_account_id();
}
inline void ProvisionedServer::_internal_set_admin_account_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  admin_account_id_ = value;
}
inline void ProvisionedServer::set_admin_account_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_admin_account_id(value);
  // @@protoc_insertion_point(field_set:junimohost.provisioner.v1.ProvisionedServer.admin_account_id)
}

// int64 server_id = 2[json_name = "serverId"];
inline void ProvisionedServer::clear_server_id() {
  server_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProvisionedServer::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProvisionedServer::server_id() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.ProvisionedServer.server_id)
  return _internal_server_id();
}
inline void ProvisionedServer::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_id_ = value;
}
inline void ProvisionedServer::set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:junimohost.provisioner.v1.ProvisionedServer.server_id)
}

// int32 instance_size = 3[json_name = "instanceSize"];
inline void ProvisionedServer::clear_instance_size() {
  instance_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProvisionedServer::_internal_instance_size() const {
  return instance_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProvisionedServer::instance_size() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.ProvisionedServer.instance_size)
  return _internal_instance_size();
}
inline void ProvisionedServer::_internal_set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  instance_size_ = value;
}
inline void ProvisionedServer::set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instance_size(value);
  // @@protoc_insertion_point(field_set:junimohost.provisioner.v1.ProvisionedServer.instance_size)
}

// string host_uri = 4[json_name = "hostUri"];
inline void ProvisionedServer::clear_host_uri() {
  host_uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProvisionedServer::host_uri() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.ProvisionedServer.host_uri)
  return _internal_host_uri();
}
inline void ProvisionedServer::set_host_uri(const std::string& value) {
  _internal_set_host_uri(value);
  // @@protoc_insertion_point(field_set:junimohost.provisioner.v1.ProvisionedServer.host_uri)
}
inline std::string* ProvisionedServer::mutable_host_uri() {
  // @@protoc_insertion_point(field_mutable:junimohost.provisioner.v1.ProvisionedServer.host_uri)
  return _internal_mutable_host_uri();
}
inline const std::string& ProvisionedServer::_internal_host_uri() const {
  return host_uri_.Get();
}
inline void ProvisionedServer::_internal_set_host_uri(const std::string& value) {
  
  host_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProvisionedServer::set_host_uri(std::string&& value) {
  
  host_uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:junimohost.provisioner.v1.ProvisionedServer.host_uri)
}
inline void ProvisionedServer::set_host_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:junimohost.provisioner.v1.ProvisionedServer.host_uri)
}
inline void ProvisionedServer::set_host_uri(const char* value,
    size_t size) {
  
  host_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:junimohost.provisioner.v1.ProvisionedServer.host_uri)
}
inline std::string* ProvisionedServer::_internal_mutable_host_uri() {
  
  return host_uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProvisionedServer::release_host_uri() {
  // @@protoc_insertion_point(field_release:junimohost.provisioner.v1.ProvisionedServer.host_uri)
  return host_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProvisionedServer::set_allocated_host_uri(std::string* host_uri) {
  if (host_uri != nullptr) {
    
  } else {
    
  }
  host_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:junimohost.provisioner.v1.ProvisionedServer.host_uri)
}

// -------------------------------------------------------------------

// UpdateServerSizeRequest

// int64 server_id = 1[json_name = "serverId"];
inline void UpdateServerSizeRequest::clear_server_id() {
  server_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateServerSizeRequest::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateServerSizeRequest::server_id() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.UpdateServerSizeRequest.server_id)
  return _internal_server_id();
}
inline void UpdateServerSizeRequest::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_id_ = value;
}
inline void UpdateServerSizeRequest::set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:junimohost.provisioner.v1.UpdateServerSizeRequest.server_id)
}

// int32 instance_size = 2[json_name = "instanceSize"];
inline void UpdateServerSizeRequest::clear_instance_size() {
  instance_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServerSizeRequest::_internal_instance_size() const {
  return instance_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServerSizeRequest::instance_size() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.UpdateServerSizeRequest.instance_size)
  return _internal_instance_size();
}
inline void UpdateServerSizeRequest::_internal_set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  instance_size_ = value;
}
inline void UpdateServerSizeRequest::set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instance_size(value);
  // @@protoc_insertion_point(field_set:junimohost.provisioner.v1.UpdateServerSizeRequest.instance_size)
}

// -------------------------------------------------------------------

// UpdateServerSizeResponse

// .junimohost.provisioner.v1.ProvisionedServer server = 1[json_name = "server"];
inline bool UpdateServerSizeResponse::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool UpdateServerSizeResponse::has_server() const {
  return _internal_has_server();
}
inline void UpdateServerSizeResponse::clear_server() {
  if (GetArena() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
inline const ::junimohost::provisioner::v1::ProvisionedServer& UpdateServerSizeResponse::_internal_server() const {
  const ::junimohost::provisioner::v1::ProvisionedServer* p = server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::junimohost::provisioner::v1::ProvisionedServer*>(
      &::junimohost::provisioner::v1::_ProvisionedServer_default_instance_);
}
inline const ::junimohost::provisioner::v1::ProvisionedServer& UpdateServerSizeResponse::server() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.UpdateServerSizeResponse.server)
  return _internal_server();
}
inline void UpdateServerSizeResponse::unsafe_arena_set_allocated_server(
    ::junimohost::provisioner::v1::ProvisionedServer* server) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:junimohost.provisioner.v1.UpdateServerSizeResponse.server)
}
inline ::junimohost::provisioner::v1::ProvisionedServer* UpdateServerSizeResponse::release_server() {
  
  ::junimohost::provisioner::v1::ProvisionedServer* temp = server_;
  server_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::junimohost::provisioner::v1::ProvisionedServer* UpdateServerSizeResponse::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_release:junimohost.provisioner.v1.UpdateServerSizeResponse.server)
  
  ::junimohost::provisioner::v1::ProvisionedServer* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::junimohost::provisioner::v1::ProvisionedServer* UpdateServerSizeResponse::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::junimohost::provisioner::v1::ProvisionedServer>(GetArena());
    server_ = p;
  }
  return server_;
}
inline ::junimohost::provisioner::v1::ProvisionedServer* UpdateServerSizeResponse::mutable_server() {
  // @@protoc_insertion_point(field_mutable:junimohost.provisioner.v1.UpdateServerSizeResponse.server)
  return _internal_mutable_server();
}
inline void UpdateServerSizeResponse::set_allocated_server(::junimohost::provisioner::v1::ProvisionedServer* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server);
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:junimohost.provisioner.v1.UpdateServerSizeResponse.server)
}

// -------------------------------------------------------------------

// ProvisionServerRequest

// int64 admin_account_id = 1[json_name = "adminAccountId"];
inline void ProvisionServerRequest::clear_admin_account_id() {
  admin_account_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProvisionServerRequest::_internal_admin_account_id() const {
  return admin_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProvisionServerRequest::admin_account_id() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.ProvisionServerRequest.admin_account_id)
  return _internal_admin_account_id();
}
inline void ProvisionServerRequest::_internal_set_admin_account_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  admin_account_id_ = value;
}
inline void ProvisionServerRequest::set_admin_account_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_admin_account_id(value);
  // @@protoc_insertion_point(field_set:junimohost.provisioner.v1.ProvisionServerRequest.admin_account_id)
}

// int32 instance_size = 2[json_name = "instanceSize"];
inline void ProvisionServerRequest::clear_instance_size() {
  instance_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProvisionServerRequest::_internal_instance_size() const {
  return instance_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProvisionServerRequest::instance_size() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.ProvisionServerRequest.instance_size)
  return _internal_instance_size();
}
inline void ProvisionServerRequest::_internal_set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  instance_size_ = value;
}
inline void ProvisionServerRequest::set_instance_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instance_size(value);
  // @@protoc_insertion_point(field_set:junimohost.provisioner.v1.ProvisionServerRequest.instance_size)
}

// -------------------------------------------------------------------

// ProvisionServerResponse

// .junimohost.provisioner.v1.ProvisionedServer server = 1[json_name = "server"];
inline bool ProvisionServerResponse::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool ProvisionServerResponse::has_server() const {
  return _internal_has_server();
}
inline void ProvisionServerResponse::clear_server() {
  if (GetArena() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
inline const ::junimohost::provisioner::v1::ProvisionedServer& ProvisionServerResponse::_internal_server() const {
  const ::junimohost::provisioner::v1::ProvisionedServer* p = server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::junimohost::provisioner::v1::ProvisionedServer*>(
      &::junimohost::provisioner::v1::_ProvisionedServer_default_instance_);
}
inline const ::junimohost::provisioner::v1::ProvisionedServer& ProvisionServerResponse::server() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.ProvisionServerResponse.server)
  return _internal_server();
}
inline void ProvisionServerResponse::unsafe_arena_set_allocated_server(
    ::junimohost::provisioner::v1::ProvisionedServer* server) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:junimohost.provisioner.v1.ProvisionServerResponse.server)
}
inline ::junimohost::provisioner::v1::ProvisionedServer* ProvisionServerResponse::release_server() {
  
  ::junimohost::provisioner::v1::ProvisionedServer* temp = server_;
  server_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::junimohost::provisioner::v1::ProvisionedServer* ProvisionServerResponse::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_release:junimohost.provisioner.v1.ProvisionServerResponse.server)
  
  ::junimohost::provisioner::v1::ProvisionedServer* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::junimohost::provisioner::v1::ProvisionedServer* ProvisionServerResponse::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::junimohost::provisioner::v1::ProvisionedServer>(GetArena());
    server_ = p;
  }
  return server_;
}
inline ::junimohost::provisioner::v1::ProvisionedServer* ProvisionServerResponse::mutable_server() {
  // @@protoc_insertion_point(field_mutable:junimohost.provisioner.v1.ProvisionServerResponse.server)
  return _internal_mutable_server();
}
inline void ProvisionServerResponse::set_allocated_server(::junimohost::provisioner::v1::ProvisionedServer* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server);
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:junimohost.provisioner.v1.ProvisionServerResponse.server)
}

// -------------------------------------------------------------------

// DeleteServerRequest

// int64 server_id = 1[json_name = "serverId"];
inline void DeleteServerRequest::clear_server_id() {
  server_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteServerRequest::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteServerRequest::server_id() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.DeleteServerRequest.server_id)
  return _internal_server_id();
}
inline void DeleteServerRequest::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_id_ = value;
}
inline void DeleteServerRequest::set_server_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:junimohost.provisioner.v1.DeleteServerRequest.server_id)
}

// -------------------------------------------------------------------

// GetServersForAccountRequest

// int64 account_id = 1[json_name = "accountId"];
inline void GetServersForAccountRequest::clear_account_id() {
  account_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServersForAccountRequest::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetServersForAccountRequest::account_id() const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.GetServersForAccountRequest.account_id)
  return _internal_account_id();
}
inline void GetServersForAccountRequest::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  account_id_ = value;
}
inline void GetServersForAccountRequest::set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:junimohost.provisioner.v1.GetServersForAccountRequest.account_id)
}

// -------------------------------------------------------------------

// GetServersForAccountResponse

// repeated .junimohost.provisioner.v1.ProvisionedServer servers = 1[json_name = "servers"];
inline int GetServersForAccountResponse::_internal_servers_size() const {
  return servers_.size();
}
inline int GetServersForAccountResponse::servers_size() const {
  return _internal_servers_size();
}
inline void GetServersForAccountResponse::clear_servers() {
  servers_.Clear();
}
inline ::junimohost::provisioner::v1::ProvisionedServer* GetServersForAccountResponse::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:junimohost.provisioner.v1.GetServersForAccountResponse.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::junimohost::provisioner::v1::ProvisionedServer >*
GetServersForAccountResponse::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:junimohost.provisioner.v1.GetServersForAccountResponse.servers)
  return &servers_;
}
inline const ::junimohost::provisioner::v1::ProvisionedServer& GetServersForAccountResponse::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::junimohost::provisioner::v1::ProvisionedServer& GetServersForAccountResponse::servers(int index) const {
  // @@protoc_insertion_point(field_get:junimohost.provisioner.v1.GetServersForAccountResponse.servers)
  return _internal_servers(index);
}
inline ::junimohost::provisioner::v1::ProvisionedServer* GetServersForAccountResponse::_internal_add_servers() {
  return servers_.Add();
}
inline ::junimohost::provisioner::v1::ProvisionedServer* GetServersForAccountResponse::add_servers() {
  // @@protoc_insertion_point(field_add:junimohost.provisioner.v1.GetServersForAccountResponse.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::junimohost::provisioner::v1::ProvisionedServer >&
GetServersForAccountResponse::servers() const {
  // @@protoc_insertion_point(field_list:junimohost.provisioner.v1.GetServersForAccountResponse.servers)
  return servers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace provisioner
}  // namespace junimohost

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_junimohost_2fprovisioner_2fv1_2fprovisioner_2eproto
