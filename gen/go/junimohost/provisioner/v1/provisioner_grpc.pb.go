// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProvisionerServiceClient is the client API for ProvisionerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisionerServiceClient interface {
	// maybe need to return long running operation? idk how long this will take
	ProvisionServer(ctx context.Context, in *ProvisionServerRequest, opts ...grpc.CallOption) (*ProvisionServerResponse, error)
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetServersForAccount(ctx context.Context, in *GetServersForAccountRequest, opts ...grpc.CallOption) (*GetServersForAccountResponse, error)
	UpdateServerSize(ctx context.Context, in *UpdateServerSizeRequest, opts ...grpc.CallOption) (*UpdateServerSizeResponse, error)
}

type provisionerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisionerServiceClient(cc grpc.ClientConnInterface) ProvisionerServiceClient {
	return &provisionerServiceClient{cc}
}

func (c *provisionerServiceClient) ProvisionServer(ctx context.Context, in *ProvisionServerRequest, opts ...grpc.CallOption) (*ProvisionServerResponse, error) {
	out := new(ProvisionServerResponse)
	err := c.cc.Invoke(ctx, "/junimohost.provisioner.v1.ProvisionerService/ProvisionServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerServiceClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/junimohost.provisioner.v1.ProvisionerService/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerServiceClient) GetServersForAccount(ctx context.Context, in *GetServersForAccountRequest, opts ...grpc.CallOption) (*GetServersForAccountResponse, error) {
	out := new(GetServersForAccountResponse)
	err := c.cc.Invoke(ctx, "/junimohost.provisioner.v1.ProvisionerService/GetServersForAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerServiceClient) UpdateServerSize(ctx context.Context, in *UpdateServerSizeRequest, opts ...grpc.CallOption) (*UpdateServerSizeResponse, error) {
	out := new(UpdateServerSizeResponse)
	err := c.cc.Invoke(ctx, "/junimohost.provisioner.v1.ProvisionerService/UpdateServerSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisionerServiceServer is the server API for ProvisionerService service.
// All implementations must embed UnimplementedProvisionerServiceServer
// for forward compatibility
type ProvisionerServiceServer interface {
	// maybe need to return long running operation? idk how long this will take
	ProvisionServer(context.Context, *ProvisionServerRequest) (*ProvisionServerResponse, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error)
	GetServersForAccount(context.Context, *GetServersForAccountRequest) (*GetServersForAccountResponse, error)
	UpdateServerSize(context.Context, *UpdateServerSizeRequest) (*UpdateServerSizeResponse, error)
	mustEmbedUnimplementedProvisionerServiceServer()
}

// UnimplementedProvisionerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProvisionerServiceServer struct {
}

func (UnimplementedProvisionerServiceServer) ProvisionServer(context.Context, *ProvisionServerRequest) (*ProvisionServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionServer not implemented")
}
func (UnimplementedProvisionerServiceServer) DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedProvisionerServiceServer) GetServersForAccount(context.Context, *GetServersForAccountRequest) (*GetServersForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersForAccount not implemented")
}
func (UnimplementedProvisionerServiceServer) UpdateServerSize(context.Context, *UpdateServerSizeRequest) (*UpdateServerSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerSize not implemented")
}
func (UnimplementedProvisionerServiceServer) mustEmbedUnimplementedProvisionerServiceServer() {}

// UnsafeProvisionerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisionerServiceServer will
// result in compilation errors.
type UnsafeProvisionerServiceServer interface {
	mustEmbedUnimplementedProvisionerServiceServer()
}

func RegisterProvisionerServiceServer(s grpc.ServiceRegistrar, srv ProvisionerServiceServer) {
	s.RegisterService(&_ProvisionerService_serviceDesc, srv)
}

func _ProvisionerService_ProvisionServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServiceServer).ProvisionServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.provisioner.v1.ProvisionerService/ProvisionServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServiceServer).ProvisionServer(ctx, req.(*ProvisionServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionerService_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServiceServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.provisioner.v1.ProvisionerService/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServiceServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionerService_GetServersForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServiceServer).GetServersForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.provisioner.v1.ProvisionerService/GetServersForAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServiceServer).GetServersForAccount(ctx, req.(*GetServersForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisionerService_UpdateServerSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServiceServer).UpdateServerSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junimohost.provisioner.v1.ProvisionerService/UpdateServerSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServiceServer).UpdateServerSize(ctx, req.(*UpdateServerSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProvisionerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "junimohost.provisioner.v1.ProvisionerService",
	HandlerType: (*ProvisionerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvisionServer",
			Handler:    _ProvisionerService_ProvisionServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _ProvisionerService_DeleteServer_Handler,
		},
		{
			MethodName: "GetServersForAccount",
			Handler:    _ProvisionerService_GetServersForAccount_Handler,
		},
		{
			MethodName: "UpdateServerSize",
			Handler:    _ProvisionerService_UpdateServerSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junimohost/provisioner/v1/provisioner.proto",
}
